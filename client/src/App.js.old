import React, { Fragment, useRef, useState, useEffect } from "react";
import { makeStyles } from "@material-ui/core/styles";
import AppBar from "@material-ui/core/AppBar";
import Toolbar from "@material-ui/core/Toolbar";
import Typography from "@material-ui/core/Typography";
import Button from "@material-ui/core/Button";
import IconButton from "@material-ui/core/IconButton";
import Fade from "@material-ui/core/Fade";
import MenuIcon from "@material-ui/icons/Menu";
import Menu from "@material-ui/core/Menu";
import MenuItem from "@material-ui/core/MenuItem";
import { BrowserRouter as Router, Route, NavLink } from "react-router-dom";

import Schedules from "./Schedules";
import Teams from "./Teams";
import Standings from "./Standings";

import getWeb3 from "./utils";
import blob_contracts from "./blob_contracts.json";
import BLOBLeagueContract from "./contracts/contracts/BLOBLeague.sol/BLOBLeague.json";
import BLOBTeamContract from "./contracts/contracts/BLOBTeam.sol/BLOBTeam.json";
import BLOBSeasonContract from "./contracts/contracts/BLOBSeason.sol/BLOBSeason.json";
import BLOBUtilsContract from "./contracts/contracts/BLOBUtils.sol/BLOBUtils.json";

import "./App.css";

const useStyles = makeStyles((theme) => ({
  root: {
    flexGrow: 1,
  },
  flex: {
    flex: 1,
  },
  menuButton: {
    marginLeft: -12,
    marginRight: 20,
  },
  toolbarMargin: theme.mixins.toolbar,
}));

const App = () => {
  const classes = useStyles();
  const contractsAndAccount = useRef(undefined);
  const [scrolling, setScrolling] = useState(false);
  const [anchor, setAnchor] = useState(null);

  useEffect(() => {
    const onScroll = (e) => {
      setScrolling(true);
    };
    window.addEventListener("scroll", onScroll);
    // clean up
    return () => {
      window.removeEventListener("scroll", onScroll);
    };
  }, []);

  useEffect(() => {
    if (scrolling) {
      let timer1 = setTimeout(() => setScrolling(false), 1000);

      // this will clear Timeout
      // when component unmount like in willComponentUnmount
      return () => {
        clearTimeout(timer1);
      };
    }
  }, [scrolling]);

  const closeMenu = () => setAnchor(null);

  const MenuItems = ({ closeMenu }) => (
    <Fragment>
      <MenuItem onClick={closeMenu}>Profile</MenuItem>
      <MenuItem onClick={closeMenu}>My account</MenuItem>
      <MenuItem onClick={closeMenu}>Logout</MenuItem>
    </Fragment>
  );
  const RightButton = () => <Button color="inherit">Login</Button>;

  const getContracts = async () => {
    if (contractsAndAccount.current === undefined) {
      try {
        const [web3, accounts] = await getWeb3();

        const leagueContract = new web3.eth.Contract(
          BLOBLeagueContract.abi,
          blob_contracts.BLOBLeague
        );

        const teamContract = new web3.eth.Contract(
          BLOBTeamContract.abi,
          blob_contracts.BLOBTeam
        );

        const seasonContract = new web3.eth.Contract(
          BLOBSeasonContract.abi,
          blob_contracts.BLOBSeason
        );

        const utilsContract = new web3.eth.Contract(
          BLOBUtilsContract.abi,
          blob_contracts.BLOBUtils
        );
        contractsAndAccount.current = {
          LeagueContract: leagueContract,
          TeamContract: teamContract,
          SeasonContract: seasonContract,
          UtilsContract: utilsContract,
          Account: accounts[0],
        };
      } catch (error) {
        // Catch any errors for any of the above operations.
        alert(
          `Failed to load web3, accounts, or contract. Check console for details.`
        );
        console.error(error);
      }
    }
    return contractsAndAccount.current;
  };

  const parseErrorCode = async (errCodeStr) => {
    const regex = /'(\d+)'/i;
    const found = errCodeStr.match(regex);
    return await getContracts().then((c) =>
      c.UtilsContract.methods.errorCodeDescription(found[1]).call()
    );
  };

  return (
    <div className={classes.root}>
      <Fragment>
        <Fade in={!scrolling}>
          <AppBar position="fixed">
            <Toolbar>
              <IconButton
                className={classes.menuButton}
                color="inherit"
                aria-label="Menu"
                onClick={(e) => setAnchor(e.currentTarget)}
              >
                <MenuIcon />
              </IconButton>
              <Menu
                anchorEl={anchor}
                open={Boolean(anchor)}
                onClose={closeMenu}
              >
                <MenuItems closeMenu={closeMenu} />
              </Menu>
              /*
              <Typography variant="h6" color="inherit">
                <NavLink className="nav-link" to="/">
                  Home
                </NavLink>
              </Typography>
              <NavLink className="nav-link" to="/teams">
                Teams
              </NavLink>
              <NavLink className="nav-link" to="/standings/">
                Standings
              </NavLink>
              */
              <RightButton />
            </Toolbar>
          </AppBar>
        </Fade>
        <div className={classes.toolbarMargin} />
        /*
        <Route path="/">
          <Schedules
            getContracts={getContracts}
            parseErrorCode={parseErrorCode}
          />
        </Route>
        <Route path="/teams">
          <Teams getContracts={getContracts} parseErrorCode={parseErrorCode} />
        </Route>
        <Route path="/standings">
          <Standings
            getContracts={getContracts}
            parseErrorCode={parseErrorCode}
          />
        </Route>
        */
      </Fragment>
    </div>
  );
};

export default App;
